package test;

//import controllers.DetailsEvenement;
import entities.*;
import services.*;
import utils.MyDataBase;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Date;



public class Main {
    public static void main(String[] args) throws SQLException {
        // Initialisation de la connexion √† la base de donn√©es
        MyDataBase dbInstance = MyDataBase.getInstance();

        // Cr√©ation des services
        ServiceTicket serviceTicket = new ServiceTicket();
        ServiceTransaction serviceTransaction = new ServiceTransaction(dbInstance.getConnection());
        ServiceTache serviceTache = new ServiceTache();
        ServiceFournisseur serviceFournisseur = new ServiceFournisseur();
        ServiceEvenement serviceEvenement = new ServiceEvenement();
        ServiceFeedback serviceFeedback = new ServiceFeedback();

        // Tester l'ajout d'un √©v√©nement
       // testerAjouterEvenement(serviceEvenement);

        // Tester l'affichage des d√©tails d'un √©v√©nement
        //testerDetailsEvenement(serviceEvenement);

        // Gestion des √©v√©nements
   //    gererEvenements(serviceEvenement);

        // Gestion des tickets
      //  gererTickets(serviceTicket);

        // Gestion des transactions
      //  gererTransactions(serviceTransaction, serviceTicket);

        // Gestion des feedbacks
//       gererFeedbacks(serviceFeedback, serviceEvenement);

     //   gererFournisseurs(serviceFournisseur, serviceEvenement);

        // Appel de la fonction pour g√©rer les t√¢ches
//        gererTaches(serviceTache);


    }

    private static void testerAjouterEvenement(ServiceEvenement serviceEvenement) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

            // Format de date pour parser les cha√Ænes de date
            Date dateDebutUtil = dateFormat.parse("12-05-2025 17:00:00");
            Date dateFinUtil = dateFormat.parse("15-05-2025 21:00:00");

            Timestamp dateDebut = new Timestamp(dateDebutUtil.getTime());
            Timestamp dateFin = new Timestamp(dateFinUtil.getTime());

// Cr√©ation d'un nouvel √©v√©nement avec nb_places
            Evenement evenement = new Evenement(
                    "Conf√©rence Art",                // Nom de l'√©v√©nement
                    "Conf√©rence sur l'Art",           // Description
                    dateDebut,                        // Date de d√©but
                    dateFin,                          // Date de fin
                    "Tunis",                          // Lieu
                    "Cirque",                         // Cat√©gorie
                    10000.0f,                         // Budget
                    "conference.jpg",                 // Image de l'√©v√©nement
                    100                                // Nombre de places
            );


            // Ajout de l'√©v√©nement
            serviceEvenement.ajouter(evenement);
            System.out.println("‚úÖ √âv√©nement ajout√© avec succ√®s.");

            // Affichage de tous les √©v√©nements pour v√©rification
            List<Evenement> evenements = serviceEvenement.afficher();
            System.out.println("\nüìã Liste des √©v√©nements :");
            for (Evenement e : evenements) {
                System.out.println(e);
            }

        } catch (ParseException e) {
            System.out.println("‚ùå Erreur de format de date : " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        }
    }

//    private static void testerDetailsEvenement(ServiceEvenement serviceEvenement) {
//        try {
//            // R√©cup√©rer un √©v√©nement de la base de donn√©es (par exemple, le premier √©v√©nement)
//            List<Evenement> evenements = serviceEvenement.afficher();
//            if (!evenements.isEmpty()) {
//                Evenement evenement = evenements.get(0); // Prendre le premier √©v√©nement de la liste
//
//                // Simuler l'affichage des d√©tails dans l'interface
//                DetailsEvenement detailsEvenement = new DetailsEvenement();
//                detailsEvenement.setResNom(evenement.getNom());
//                detailsEvenement.setResDescription(evenement.getDescription());
//                detailsEvenement.setResDateDebut(evenement.getDate_debut().toString());
//                detailsEvenement.setResDateFin(evenement.getDate_fin().toString());
//                detailsEvenement.setResLieu(evenement.getLieu());
//                detailsEvenement.setResCategorie(evenement.getCategorie());
//                detailsEvenement.setResBudget(String.valueOf(evenement.getBudget()));
//                detailsEvenement.setResImageEvent(evenement.getImage_event());
//                detailsEvenement.setResNbPlaces(String.valueOf(evenement.getNb_places()));
//
//                // Afficher les d√©tails dans la console (simulation)
//                System.out.println("\nüìã D√©tails de l'√©v√©nement :");
//                System.out.println("Nom : " + evenement.getNom());
//                System.out.println("Description : " + evenement.getDescription());
//                System.out.println("Date de d√©but : " + evenement.getDate_debut());
//                System.out.println("Date de fin : " + evenement.getDate_fin());
//                System.out.println("Lieu : " + evenement.getLieu());
//                System.out.println("Cat√©gorie : " + evenement.getCategorie());
//                System.out.println("Budget : " + evenement.getBudget());
//                System.out.println("Image : " + evenement.getImage_event());
//                System.out.println("Nombre de places : " + evenement.getNb_places());
//            } else {
//                System.out.println("‚ùå Aucun √©v√©nement trouv√© dans la base de donn√©es.");
//            }
//
//        } catch (SQLException e) {
//            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
//        }
//    }

    private static void gererTickets(ServiceTicket serviceTicket) {
        try {
            ServiceEvenement serviceEvenement=new ServiceEvenement();
            Evenement evenement1 = serviceEvenement.getEvenementById(3); // Remplace 1 par un ID valide
            Evenement evenement2 = serviceEvenement.getEvenementById(4); // Remplace 2 par un ID valide

            if (evenement1 == null || evenement2 == null) {
                System.out.println("‚ùå Impossible d'ajouter des tickets : les √©v√©nements n'existent pas.");
                return;
            }
            // Ajout des tickets
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            Timestamp dateValidite1 = new Timestamp(dateFormat.parse("15-02-2025 18:41:54").getTime());
            Timestamp dateValidite2 = new Timestamp(dateFormat.parse("15-02-2025 18:41:54").getTime());

            // Ajout des tickets
            Ticket ticket1 = new Ticket(evenement1, "VIP", "En attente", 180.0, dateValidite1, 50);
            Ticket ticket2 = new Ticket(evenement2, "Standard", "En attente", 150.0, dateValidite2, 80);

            serviceTicket.ajouter(ticket1);
            serviceTicket.ajouter(ticket2);
            System.out.println("‚úÖ Tickets ajout√©s avec succ√®s.");

            // Affichage des tickets apr√®s ajout
            afficherTickets(serviceTicket);

            // Modification d'un ticket
            ticket1.setStatut("Compl√©t√©");
            serviceTicket.modifier(ticket1);
            System.out.println("‚úÖ Ticket modifi√© avec succ√®s.");

            // Affichage apr√®s modification
            afficherTickets(serviceTicket);

            // Suppression d'un ticket
            serviceTicket.supprimer(ticket2.getId_ticket());
            System.out.println("‚úÖ Ticket supprim√© avec succ√®s.");

            // Affichage apr√®s suppression
            afficherTickets(serviceTicket);

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }
    private static void gererTransactions(ServiceTransaction serviceTransaction, ServiceTicket serviceTicket) {
        try {
            // R√©cup√©ration des tickets disponibles
            List<Ticket> tickets = serviceTicket.afficher();

            if (tickets == null || tickets.isEmpty()) {
                System.out.println("‚ùå Aucun ticket disponible. Impossible d'ajouter une transaction.");
                return;
            }

            // Cr√©ation de la date actuelle au format Timestamp
            Timestamp dateActuelle = new Timestamp(System.currentTimeMillis());

            // Cr√©ation et ajout de la transaction
           // Transaction transaction = new Transaction(1,1, tickets, 150.0, "en ligne", "Visa", dateActuelle);
        //    serviceTransaction.ajouter(transaction);
            System.out.println("‚úÖ Transaction ajout√©e avec succ√®s.");

            // Affichage des transactions apr√®s ajout
            afficherTransactions(serviceTransaction);

            // Suppression de la transaction ajout√©e
         //   serviceTransaction.supprimer(transaction.getId_transaction());
            System.out.println("‚úÖ Transaction supprim√©e avec succ√®s.");

            // Affichage des transactions apr√®s suppression
            afficherTransactions(serviceTransaction);

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        }
    }



    private static void afficherTickets(ServiceTicket serviceTicket) throws SQLException {
        List<Ticket> tickets = serviceTicket.afficher();
        System.out.println("\nüìã Liste des tickets :");
        for (Ticket t : tickets) {
            System.out.println(t);
        }
    }

    private static void afficherTransactions(ServiceTransaction serviceTransaction) throws SQLException {
        List<Transaction> transactions = serviceTransaction.afficher();
        System.out.println("\nüìã Liste des transactions :");
        for (Transaction t : transactions) {
            System.out.println(t);
        }
    }

    private static void afficherFournisseurs(ServiceFournisseur serviceFournisseur) throws SQLException {
        List<Fournisseur> fournisseurs = serviceFournisseur.afficher();
        System.out.println("\nüìã Liste des fournisseurs :");
        for (Fournisseur f : fournisseurs) {
            System.out.println(f);
        }
    }


    private static void gererEvenements(ServiceEvenement serviceEvenement) {
        try {
            // Format de date pour parser les cha√Ænes de date
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

            // Dates de d√©but et de fin pour l'√©v√©nement
            Date dateDebutUtil = dateFormat.parse("12-05-2025 17:00:00");
            Date dateFinUtil = dateFormat.parse("15-05-2025 21:00:00");

            // Conversion des Date en Timestamp
            Timestamp dateDebut = new Timestamp(dateDebutUtil.getTime());
            Timestamp dateFin = new Timestamp(dateFinUtil.getTime());

            // Cr√©ation d'un nouvel √©v√©nement avec nb_places
            Evenement evenement = new Evenement(
                    "Conf√©rence Art",                // Nom de l'√©v√©nement
                    "Conf√©rence sur l'Art",          // Description
                    dateDebut,                       // Date de d√©but
                    dateFin,                         // Date de fin
                    "Tunis",                         // Lieu
                    "Cirque",                           // Cat√©gorie
                    10000.0f,                        // Budget
                    "conference.jpg",                // Image de l'√©v√©nement
                    100                              // Nombre de places
            );

            // Ajout de l'√©v√©nement
            serviceEvenement.ajouter(evenement);
            System.out.println("‚úÖ √âv√©nement ajout√© avec succ√®s.");

            // Affichage de tous les √©v√©nements
            List<Evenement> evenements = serviceEvenement.afficher();
            System.out.println("\nüìã Liste des √©v√©nements :");
            for (Evenement e : evenements) {
                System.out.println(e);
            }

        } catch (ParseException e) {
            System.out.println("‚ùå Erreur de format de date : " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        }
    }

    private static void gererFeedbacks(ServiceFeedback serviceFeedback, ServiceEvenement serviceEvenement) {
        try {
            // Cr√©ation d'un √©v√©nement et d'un utilisateur pour le feedback
            Evenement evenement = new Evenement();
            evenement.setEvenement_id(3); // Supposons qu'un √©v√©nement avec l'ID 1 existe

            Utilisateur utilisateur = new Utilisateur();
            utilisateur.setUtilisateurId(1); // Supposons qu'un utilisateur avec l'ID 1 existe

            // Cr√©ation d'un feedback
            Feedback feedback = new Feedback(
                5, // Note
                "Great event!", // Commentaire
                new Date(), // Date_feedback (date actuelle)
                evenement, // √âv√©nement
                utilisateur // Utilisateur
            );

            // Ajout du feedback
            serviceFeedback.ajouter(feedback);
            System.out.println("‚úÖ Feedback ajout√© avec succ√®s.");

            // Modification du feedback
            feedback.setNote(4);
            feedback.setCommentaire("Good event, but could be better.");
            serviceFeedback.modifier(feedback);
            System.out.println("‚úÖ Feedback modifi√© avec succ√®s.");

            // Suppression du feedback
            serviceFeedback.supprimer(feedback.getFeedback_id());
            System.out.println("‚úÖ Feedback supprim√© avec succ√®s.");

            // Affichage des feedbacks
            afficherFeedbacks(serviceFeedback);

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        }
    }

    private static void afficherFeedbacks(ServiceFeedback serviceFeedback) throws SQLException {
        List<Feedback> feedbacks = serviceFeedback.afficher();
        System.out.println("\nüìã Liste des feedbacks :");
        for (Feedback f : feedbacks) {
            System.out.println(f);
        }
    }


    private static void gererFournisseurs(ServiceFournisseur serviceFournisseur, ServiceEvenement serviceEvenement) {
        try {
            // Cr√©ation d'un √©v√©nement pour le fournisseur
            Evenement evenement = new Evenement();
            evenement.setEvenement_id(3);

            // Cr√©ation d'un fournisseur
            Fournisseur fournisseur = new Fournisseur( "Sonorisation Pro", "Mat√©riel audio", "Contrat sign√©", evenement);

            // Ajout du fournisseur
            serviceFournisseur.ajouter(fournisseur);
            System.out.println("‚úÖ Fournisseur ajout√© avec succ√®s.");

            // Affichage des fournisseurs
            afficherFournisseurs(serviceFournisseur);

            // Modification du fournisseur
//            fournisseur.setTypeService("Mat√©riel vid√©o");
//            serviceFournisseur.modifier(fournisseur);
//            System.out.println("‚úÖ Fournisseur modifi√© avec succ√®s.");

            // Suppression du fournisseur
//            serviceFournisseur.supprimer(fournisseur.getFournisseurId());
//            System.out.println("‚úÖ Fournisseur supprim√© avec succ√®s.");

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        }
    }
    private static void gererTaches(ServiceTache serviceTache) {
        try {
            // Cr√©ation d'une t√¢che avec priorit√©
            Evenement evenement = new Evenement();
            evenement.setEvenement_id(3);
            Fournisseur fournisseur = new Fournisseur();
            fournisseur.setFournisseurId(1);

            Tache tache = new Tache(
                "Pr√©paration de la salle",
                "Pr√©parer la salle pour la conf√©rence",
                "To Do",
                new Date(System.currentTimeMillis()),
                evenement,
                fournisseur,
                "Haute" , // Priorit√©
                    "A"
            );

            // Ajout de la t√¢che
            serviceTache.ajouter(tache);
            System.out.println("‚úÖ T√¢che ajout√©e avec succ√®s.");

            // Affichage des t√¢ches
            List<Tache> taches = serviceTache.afficher();
            System.out.println("\nüìã Liste des t√¢ches :");
            for (Tache t : taches) {
                System.out.println(t);
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur SQL : " + e.getMessage());
        }
    }




}








